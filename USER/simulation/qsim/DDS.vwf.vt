// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/18/2024 04:24:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DDS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DDS_vlg_sample_tst(
	B,
	CLK,
	sampler_tx
);
input [31:0] B;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(B or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DDS_vlg_check_tst (
	DAC,
	DAC_CLK,
	sampler_rx
);
input [9:0] DAC;
input  DAC_CLK;
input sampler_rx;

reg [9:0] DAC_expected;
reg  DAC_CLK_expected;

reg [9:0] DAC_prev;
reg  DAC_CLK_prev;

reg [9:0] DAC_expected_prev;

reg [9:0] last_DAC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DAC_prev = DAC;
	DAC_CLK_prev = DAC_CLK;
end

// update expected /o prevs

always @(trigger)
begin
	DAC_expected_prev = DAC_expected;
end


// expected DAC[ 9 ]
initial
begin
	DAC_expected[9] = 1'b0;
end 
// expected DAC[ 8 ]
initial
begin
	DAC_expected[8] = 1'b0;
end 
// expected DAC[ 7 ]
initial
begin
	DAC_expected[7] = 1'b0;
end 
// expected DAC[ 6 ]
initial
begin
	DAC_expected[6] = 1'b0;
end 
// expected DAC[ 5 ]
initial
begin
	DAC_expected[5] = 1'b0;
end 
// expected DAC[ 4 ]
initial
begin
	DAC_expected[4] = 1'b0;
end 
// expected DAC[ 3 ]
initial
begin
	DAC_expected[3] = 1'b0;
end 
// expected DAC[ 2 ]
initial
begin
	DAC_expected[2] = 1'b0;
end 
// expected DAC[ 1 ]
initial
begin
	DAC_expected[1] = 1'b0;
end 
// expected DAC[ 0 ]
initial
begin
	DAC_expected[0] = 1'b0;
end 
// generate trigger
always @(DAC_expected or DAC or DAC_CLK_expected or DAC_CLK)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DAC = %b | expected DAC_CLK = %b | ",DAC_expected_prev,DAC_CLK_expected_prev);
	$display("| real DAC = %b | real DAC_CLK = %b | ",DAC_prev,DAC_CLK_prev);
`endif
	if (
		( DAC_expected_prev[0] !== 1'bx ) && ( DAC_prev[0] !== DAC_expected_prev[0] )
		&& ((DAC_expected_prev[0] !== last_DAC_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[0] = DAC_expected_prev[0];
	end
	if (
		( DAC_expected_prev[1] !== 1'bx ) && ( DAC_prev[1] !== DAC_expected_prev[1] )
		&& ((DAC_expected_prev[1] !== last_DAC_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[1] = DAC_expected_prev[1];
	end
	if (
		( DAC_expected_prev[2] !== 1'bx ) && ( DAC_prev[2] !== DAC_expected_prev[2] )
		&& ((DAC_expected_prev[2] !== last_DAC_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[2] = DAC_expected_prev[2];
	end
	if (
		( DAC_expected_prev[3] !== 1'bx ) && ( DAC_prev[3] !== DAC_expected_prev[3] )
		&& ((DAC_expected_prev[3] !== last_DAC_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[3] = DAC_expected_prev[3];
	end
	if (
		( DAC_expected_prev[4] !== 1'bx ) && ( DAC_prev[4] !== DAC_expected_prev[4] )
		&& ((DAC_expected_prev[4] !== last_DAC_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[4] = DAC_expected_prev[4];
	end
	if (
		( DAC_expected_prev[5] !== 1'bx ) && ( DAC_prev[5] !== DAC_expected_prev[5] )
		&& ((DAC_expected_prev[5] !== last_DAC_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[5] = DAC_expected_prev[5];
	end
	if (
		( DAC_expected_prev[6] !== 1'bx ) && ( DAC_prev[6] !== DAC_expected_prev[6] )
		&& ((DAC_expected_prev[6] !== last_DAC_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[6] = DAC_expected_prev[6];
	end
	if (
		( DAC_expected_prev[7] !== 1'bx ) && ( DAC_prev[7] !== DAC_expected_prev[7] )
		&& ((DAC_expected_prev[7] !== last_DAC_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[7] = DAC_expected_prev[7];
	end
	if (
		( DAC_expected_prev[8] !== 1'bx ) && ( DAC_prev[8] !== DAC_expected_prev[8] )
		&& ((DAC_expected_prev[8] !== last_DAC_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[8] = DAC_expected_prev[8];
	end
	if (
		( DAC_expected_prev[9] !== 1'bx ) && ( DAC_prev[9] !== DAC_expected_prev[9] )
		&& ((DAC_expected_prev[9] !== last_DAC_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DAC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DAC_expected_prev);
		$display ("     Real value = %b", DAC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DAC_exp[9] = DAC_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DDS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] B;
reg CLK;
// wires                                               
wire [9:0] DAC;
wire DAC_CLK;

wire sampler;                             

// assign statements (if any)                          
DDS i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.CLK(CLK),
	.DAC(DAC),
	.DAC_CLK(DAC_CLK)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b1;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b1;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b1;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b1;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b1;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b1;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b1;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b1;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b1;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b1;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b1;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b1;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b1;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b1;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b1;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b1;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b1;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b1;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b1;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b1;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 

DDS_vlg_sample_tst tb_sample (
	.B(B),
	.CLK(CLK),
	.sampler_tx(sampler)
);

DDS_vlg_check_tst tb_out(
	.DAC(DAC),
	.DAC_CLK(DAC_CLK),
	.sampler_rx(sampler)
);
endmodule

